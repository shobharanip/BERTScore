import pandas as pd
from Translation_evaluator import TranslationEvaluator

INPUT_XLSX  = "/appdata/cortex/dev1/shob/your_input.xlsx"
OUTPUT_XLSX = "/appdata/cortex/dev1/shob/translation_with_metrics.xlsx"

# 1) Read every sheet into a dict
all_sheets: dict[str, pd.DataFrame] = pd.read_excel(
    INPUT_XLSX, sheet_name=None    # sheet_name=None => dict of all sheets
)

# 2) Grab the sheet that actually contains your translations:
#    (replace "translations" with your real sheet name)
trans_df = all_sheets["translations"].copy()

# 3) Force the key cols to strings (no more floats/ints!)
for col in ["en",                            # your reference
            "base_madlad400_translation",    # model output #1
            "base_helsinki_translation"]:   # model output #2
    trans_df[col] = trans_df[col].fillna("").astype(str)

# 4) Plug it into your evaluator
evaluator = TranslationEvaluator()
evaluator._data = trans_df      # bypass load_data if it only handles single‑sheet defaults
evaluator.evaluate(
    prediction_cols = [
        "base_madlad400_translation",
        "base_helsinki_translation"
    ],
    reference_col   = "en",
    metrics         = ["BLEU", "ChrF", "ChrF++"],
    keep_cols       = None       # or omit entirely if you’ve defaulted it to “all”
)

# 5) Write everything back out: all original sheets + your two result sheets
with pd.ExcelWriter(OUTPUT_XLSX, engine="openpyxl") as writer:
    # a) copy original sheets
    for name, df in all_sheets.items():
        df.to_excel(writer, sheet_name=name, index=False)

    # b) append the new evaluation sheets
    evaluator._detailed_results.to_excel(
        writer,
        sheet_name="Detailed Results",
        index=False
    )
    evaluator._model_metrics.to_excel(
        writer,
        sheet_name="Model Metrics",
        index=False
    )

print("Done — all sheets plus metrics written to", OUTPUT_XLSX)